---
title: "Alarm Sandbox"
format: html
editor: visual
---

## Libraries & Data

```{r}
library(broom)
library(igraph)
library(RColorBrewer)
library(viridis)
library(here)
library(tidyverse)

# Loads all hawk data
hwk_data <- read_csv(here("data/HwkAll.csv"))

# Cleans and Assigns Data
hwk_data[hwk_data== c("na", "#N/A")] <- NA
hwk_data$Pre_Bird_Height <-  as.numeric(hwk_data$Pre_Bird_Height)
hwk_data$Flight_apex <- as.numeric((hwk_data$Flight_apex))

view(hwk_data)
#str(hwk_data)

social_alarm <- read_csv(here("data/Social_Alarm.csv"))
social_alarm$Alarm <- as.numeric(social_alarm$Alarm)
head(social_alarm)
```

## Social Group Alarm % With All Individuals

```{r}
#subsetting for only treatment
hwk_subset <- subset(hwk_data, hwk == 1)

# percentages of alarm by social structure
percent_solo <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "solo"], na.rm = TRUE) * 100
percent_pair <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "pair"], na.rm = TRUE) * 100
percent_comp <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "lek"], na.rm = TRUE) * 100
percent_ssf <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "ssf"], na.rm = TRUE) * 100
percent_msf <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "msf"], na.rm = TRUE) * 100
percent_ant <- mean(hwk_subset$alarm[hwk_subset$SocialGroup == "ant"], na.rm = TRUE) * 100

# Sample sizes
sample_solo <- sum(hwk_subset$SocialGroup == "solo", na.rm = TRUE)
sample_pair <- sum(hwk_subset$SocialGroup == "pair", na.rm = TRUE)
sample_comp <- sum(hwk_subset$SocialGroup == "lek", na.rm = TRUE)
sample_ssf <- sum(hwk_subset$SocialGroup == "ssf", na.rm = TRUE)
sample_msf <- sum(hwk_subset$SocialGroup == "msf", na.rm = TRUE)
sample_ant <- sum(hwk_subset$SocialGroup == "ant", na.rm = TRUE)

# New dataframe for plotting
plot_data <- data.frame(
 Group = factor(c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Ant Flock","Competitive Flock"),
                levels = c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Ant Flock", "Competitive Flock")),  
 Percentage = c(percent_solo, percent_pair, percent_ssf, percent_msf, percent_ant, percent_comp),
  SampleSize = c(sample_solo, sample_pair, sample_ssf, sample_msf, sample_ant, sample_comp)
)

# Create a bar plot
ggplot(plot_data, aes(x = Group, y = Percentage, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste("n =", SampleSize)), position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Percentage of Alarm Call Reactions by Sociality Across All Individuals",
       y = "Alarm Percentage",
       x = "Social Group") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 330, vjust = .5, hjust = 0)) +
  scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 50))

ggsave(here("figs/Alarm_Sociality_Individuals.png"))
```

## Alarm Social Group Flock Level

```{r}
#subsetting for only treatment
hwk_subset <- subset(social_alarm, hwk == 1)
view(hwk_subset)


# percentages of alarm by social structure
percent_solo <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "solo"], na.rm = TRUE) * 100
percent_pair <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "pair"], na.rm = TRUE) * 100
percent_comp <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "lek"], na.rm = TRUE) * 100
percent_ssf <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "ssf"], na.rm = TRUE) * 100
percent_msf <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "msf"], na.rm = TRUE) * 100
percent_ant <- mean(hwk_subset$Alarm[hwk_subset$SocialGroup == "ant"], na.rm = TRUE) * 100

# Sample sizes
sample_solo <- sum(hwk_subset$SocialGroup == "solo", na.rm = TRUE)
sample_pair <- sum(hwk_subset$SocialGroup == "pair", na.rm = TRUE)
sample_comp <- sum(hwk_subset$SocialGroup == "lek", na.rm = TRUE)
sample_ssf <- sum(hwk_subset$SocialGroup == "ssf", na.rm = TRUE)
sample_msf <- sum(hwk_subset$SocialGroup == "msf", na.rm = TRUE)
sample_ant <- sum(hwk_subset$SocialGroup == "ant", na.rm = TRUE)

# New dataframe for plotting
plot_data <- data.frame(
 Group = factor(c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Ant Flock","Competitive Flock"),
                levels = c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Ant Flock", "Competitive Flock")),  
 Percentage = c(percent_solo, percent_pair, percent_ssf, percent_msf, percent_ant, percent_comp),
  SampleSize = c(sample_solo, sample_pair, sample_ssf, sample_msf, sample_ant, sample_comp)
)

# Create a bar plot
ggplot(plot_data, aes(x = Group, y = Percentage, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste("n =", SampleSize)), 
            position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Percentage of Alarm Call Reactions by Sociality Across Group Types",
       y = "Alarm Percentage",
       x = "Social Group") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 330, vjust = .5, hjust = 0)) +
  scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 50))


ggsave(here("figs/Alarm_Sociality_Groups.png"))
```

## Alarm Height

```{r}
# Read the data from the "hwk" CSV file
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1
hwk1_data <- df[df$hwk == 1,]
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height)
hwk_less10 <- subset(hwk_height_na, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Height" values within hwk1_data
unique_pre_heights <- unique(round(hwk_less10$Pre_Bird_Height))

# Initialize empty vectors to store the percentages and sample sizes
percentage_values <- numeric(length(unique_pre_heights))
sample_sizes <- numeric(length(unique_pre_heights))

# Calculate the percentage and sample size for each unique integer "Pre_Height" value within hwk1_data
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  total_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value)
  alarm_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value & hwk_height_na$Audio_React == "a")
  percentage_values[i] <- (alarm_count / total_count) * 100
  sample_sizes[i] <- alarm_count
}

# Create a data frame for plotting
plot_data <- data.frame(Pre_Height = unique_pre_heights, Percentage = percentage_values, Sample_Size = sample_sizes)

# Create a scatter plot with Pre_Height on the x-axis and Percentage on the y-axis
p <- ggplot(plot_data, aes(x = Pre_Height, y = Percentage)) +
  geom_point() +  # Scatter plot
  labs(x = "Bird Height", y = "Percentage of Alarm Instances") +
  theme_minimal() +
  geom_text(aes(label = Sample_Size), hjust = -0.4, vjust = 0.5) + 
  scale_x_continuous(breaks = unique_pre_heights) #+  # Add integer labels to the x-axis
  
  # Add a linear regression line while keeping the line between points
  #geom_smooth(method = "lm", se = FALSE, color = "blue")

p +
  stat_smooth(method = "lm", formula = y ~ poly(x, 3))

# polynomial lines
fit1 <- lm(Percentage~Pre_Height, data=plot_data)
fit2 <- lm(Percentage~poly(Pre_Height,2,raw=TRUE), data=plot_data)
fit3 <- lm(Percentage~poly(Pre_Height,3,raw=TRUE), data=plot_data)
fit4 <- lm(Percentage~poly(Pre_Height,4,raw=TRUE), data=plot_data)
fit5 <- lm(Percentage~poly(Pre_Height,5,raw=TRUE), data=plot_data)

#calculated adjusted R-squared of each model
summary(fit1)$adj.r.squared
summary(fit2)$adj.r.squared
summary(fit3)$adj.r.squared
summary(fit4)$adj.r.squared
summary(fit5)$adj.r.squared
```

## Alarm Height and Predator Height

```{r}
# Read the data from the "hwk" CSV file
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1
hwk1_data <- df[df$hwk == 1,]

# Drop rows with NA in Pre_Bird_Height and Flight_apex
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height, Flight_apex)
hwk_less15 <- subset(hwk_height_na, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values within hwk_less15
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Initialize vectors for percentage and sample sizes for both Alarm and Flight_apex
alarm_percentage <- numeric(length(unique_pre_heights))
no_alarm_percentage <- numeric(length(unique_pre_heights))
flight_alarm_percentage <- numeric(length(unique_pre_heights))
flight_no_alarm_percentage <- numeric(length(unique_pre_heights))

# Calculate percentages for each height for both Pre_Bird_Height and Flight_apex
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  
  # Pre_Bird_Height for alarm and no alarm
  total_count <- sum(round(hwk_less15$Pre_Bird_Height) == pre_height_value)
  alarm_count <- sum(round(hwk_less15$Pre_Bird_Height) == pre_height_value & hwk_less15$Audio_React == "a")
  no_alarm_count <- total_count - alarm_count
  
  alarm_percentage[i] <- (alarm_count / total_count) * 100
  no_alarm_percentage[i] <- (no_alarm_count / total_count) * 100
  
  # Flight_apex for alarm and no alarm
  flight_total_count <- sum(round(hwk_less15$Flight_apex) == pre_height_value)
  flight_alarm_count <- sum(round(hwk_less15$Flight_apex) == pre_height_value & hwk_less15$Audio_React == "a")
  flight_no_alarm_count <- flight_total_count - flight_alarm_count
  
  flight_alarm_percentage[i] <- (flight_alarm_count / flight_total_count) * 100
  flight_no_alarm_percentage[i] <- (flight_no_alarm_count / flight_total_count) * 100
}

# Create a data frame for plotting
plot_data <- data.frame(
  Pre_Height = unique_pre_heights,
  Alarm_Percentage = alarm_percentage,
  No_Alarm_Percentage = no_alarm_percentage,
  Flight_Alarm_Percentage = flight_alarm_percentage,
  Flight_No_Alarm_Percentage = flight_no_alarm_percentage
)

# Plot the four lines with different colors
p <- ggplot(plot_data, aes(x = Pre_Height)) +
  geom_line(aes(y = Alarm_Percentage, color = "Alarm (Pre_Bird_Height)"), size = 1.2) +
  geom_line(aes(y = No_Alarm_Percentage, color = "No Alarm (Pre_Bird_Height)"), size = 1.2, linetype = "dashed") +
  geom_line(aes(y = Flight_Alarm_Percentage, color = "Alarm (Flight_apex)"), size = 1.2) +
  geom_line(aes(y = Flight_No_Alarm_Percentage, color = "No Alarm (Flight_apex)"), size = 1.2, linetype = "dashed") +
  labs(x = "Bird Height (meters)", y = "Percentage (%)", 
       title = "Comparative Analysis of Alarm vs No Alarm with Respect to Bird Height and Flight Apex") +
  scale_color_manual(values = c("blue", "red", "green", "purple"), 
                     name = "Legend") +
  theme_minimal()

print(p)

```

```{r}
# Read the data from the "hwk" CSV file
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1
hwk1_data <- df[df$hwk == 1,]

# Drop rows with NA in Pre_Bird_Height and Flight_apex
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height, Flight_apex)
hwk_less15 <- subset(hwk_height_na, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values within hwk_less15
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Initialize vectors for percentage and sample sizes for Alarm
alarm_percentage <- numeric(length(unique_pre_heights))

# Calculate percentages for Pre_Bird_Height with Alarm
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  
  # Pre_Bird_Height for alarm
  total_count <- sum(round(hwk_less15$Pre_Bird_Height) == pre_height_value)
  alarm_count <- sum(round(hwk_less15$Pre_Bird_Height) == pre_height_value & hwk_less15$Audio_React == "a")
  
  alarm_percentage[i] <- (alarm_count / total_count) * 100
}

# Create a data frame for plotting
plot_data <- data.frame(
  Pre_Height = unique_pre_heights,
  Alarm_Percentage = alarm_percentage
)

# Plot the Alarm percentage line with Pre_Bird_Height
p <- ggplot(plot_data, aes(x = Pre_Height, y = Alarm_Percentage)) +
  geom_line(color = "blue", size = 1.2) +  # Line for alarm vs Pre_Bird_Height
  labs(x = "Bird Height (meters)", y = "Percentage of Alarm Instances (%)", 
       title = "Alarm vs Bird Height with Flight Apex Overlay") +
  theme_minimal()

# Add scatterplot for Flight_apex to overlay
p <- p + 
  geom_point(data = hwk_less15, aes(x = Pre_Bird_Height, y = Flight_apex), color = "red", alpha = 0.5) +
  labs(x = "Bird Height (meters)", y = "Percentage of Alarm Instances / Flight Apex")

# Display the plot
print(p)

```

```{r}
# Read the data from the "hwk" CSV file
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1
hwk1_data <- df[df$hwk == 1,]

# Drop rows with NA in Pre_Bird_Height, Flight_apex, and Audio_React
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15 and alarms only ("a" in Audio_React)
hwk_alarm_data <- subset(hwk_height_na, Pre_Bird_Height <= 15 & Audio_React == "a")

# Calculate the unique integer "Pre_Bird_Height" values within the data
unique_pre_heights <- unique(round(hwk_alarm_data$Pre_Bird_Height))

# Initialize vectors for percentage and sample sizes for Alarm
alarm_percentage <- numeric(length(unique_pre_heights))
sample_sizes <- numeric(length(unique_pre_heights))

# Calculate percentages for Pre_Bird_Height with Alarm
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  
  # Total count for Pre_Bird_Height
  total_count <- sum(round(hwk_alarm_data$Pre_Bird_Height) == pre_height_value)
  
  # Alarm count at each Pre_Bird_Height
  alarm_count <- sum(round(hwk_alarm_data$Pre_Bird_Height) == pre_height_value & hwk_alarm_data$Audio_React == "a")
  
  alarm_percentage[i] <- (alarm_count / total_count) * 100
  sample_sizes[i] <- alarm_count
}

# Create a data frame for plotting alarm percentage
plot_data <- data.frame(
  Pre_Height = unique_pre_heights,
  Alarm_Percentage = alarm_percentage,
  Sample_Size = sample_sizes
)

# Create the main plot with Alarm Percentage
p <- ggplot(plot_data, aes(x = Pre_Height, y = Alarm_Percentage)) +
  geom_point(color = "blue", size = 3) +  # Scatter plot for Alarm Percentage
  labs(x = "Bird Height (meters)", y = "Percentage of Alarm Instances (%)", 
       title = "Alarm vs Bird Height with Flight Apex Boxplots") +
  theme_minimal() +
  geom_text(aes(label = Sample_Size), hjust = -0.4, vjust = 0.5) +  # Add sample size labels
  scale_x_continuous(breaks = unique_pre_heights)  # Set breaks for Pre_Height

# Overlay box-and-whisker plots for Flight_apex during alarms
p <- p + 
  geom_boxplot(data = hwk_alarm_data, aes(x = round(Pre_Bird_Height), y = Flight_apex, group = round(Pre_Bird_Height)), 
               color = "red", alpha = 0.5, width = 0.5) +  # Boxplots for Flight Apex
  labs(y = "Percentage of Alarm Instances / Flight Apex")  # Adjust the y-axis label

# Display the plot
print(p)

```

```{r}
# Required packages
library(ggplot2)
library(dplyr)

# Read the data from the "hwk" CSV file
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1
hwk1_data <- df[df$hwk == 1,]

# Drop rows with NA in Pre_Bird_Height, Flight_apex, and Audio_React
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15 and alarms only ("a" in Audio_React)
hwk_alarm_data <- subset(hwk_height_na, Pre_Bird_Height <= 15 & Audio_React == "a")

# Calculate the unique integer "Pre_Bird_Height" values within the data
unique_pre_heights <- unique(round(hwk_alarm_data$Pre_Bird_Height))

# Initialize vectors for percentage and sample sizes for Alarm
alarm_percentage <- numeric(length(unique_pre_heights))
sample_sizes <- numeric(length(unique_pre_heights))

# Calculate percentages for Pre_Bird_Height with Alarm
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  
  # Total count for Pre_Bird_Height
  total_count <- sum(round(hwk_alarm_data$Pre_Bird_Height) == pre_height_value)
  
  # Alarm count at each Pre_Bird_Height
  alarm_count <- sum(round(hwk_alarm_data$Pre_Bird_Height) == pre_height_value & hwk_alarm_data$Audio_React == "a")
  
  alarm_percentage[i] <- (alarm_count / total_count) * 100
  sample_sizes[i] <- alarm_count
}

# Create a data frame for plotting alarm percentage
plot_data <- data.frame(
  Pre_Height = unique_pre_heights,
  Alarm_Percentage = alarm_percentage,
  Sample_Size = sample_sizes
)

# Create the main plot with Alarm Percentage (Scatter plot)
p <- ggplot(plot_data, aes(x = Pre_Height, y = Alarm_Percentage)) +
  geom_point(color = "blue", size = 3) +  # Scatter plot for Alarm Percentage
  labs(x = "Bird Height (meters)", y = "Percentage of Alarm Instances (%)", 
       title = "Alarm vs Bird Height with Flight Apex Boxplots") +
  theme_minimal() +
  geom_text(aes(label = Sample_Size), hjust = -0.4, vjust = 0.5) +  # Add sample size labels
  scale_x_continuous(breaks = unique_pre_heights) +  # Set breaks for Pre_Height
  
  # Add a linear regression line (cubic)
  stat_smooth(method = "lm", formula = y ~ poly(x, 3), color = "blue", se = FALSE)

# Overlay horizontal box plots for Flight_apex during alarms
# Create dummy y-values for placing box plots along the x-axis only (1D boxplot)
hwk_alarm_data$y_dummy <- 0  # All box plots at y=0

p <- p + 
  geom_boxplot(data = hwk_alarm_data, aes(x = round(Pre_Bird_Height), y = y_dummy, group = round(Pre_Bird_Height)), 
               orientation = "x", width = 0.05, outlier.shape = NA,  # Narrow width along y-axis
               color = "red", alpha = 0.7) +  # Boxplots for Flight Apex along x-axis
  labs(y = "Percentage of Alarm Instances")  # Adjust the y-axis label to only show alarm percentages

# Display the plot
print(p)

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Set random seed for reproducibility
set.seed(123)

# Generate random scatter plot data (x values as categories, y values as continuous)
scatter_data <- data.frame(
  x = c(1, 3, 5),  # Scatter points at x = 1, 3, 5
  y = c(20, 50, 30)  # Random y values
)

# Generate random data for horizontal boxplots (grouped by the same x values as scatter data)
boxplot_data <- data.frame(
  x = rep(c(1, 3, 5), each = 30),  # 30 random values for each x value
  y = c(rnorm(30, mean = 20, sd = 5),  # Group for x = 1
        rnorm(30, mean = 50, sd = 5),  # Group for x = 3
        rnorm(30, mean = 30, sd = 5))  # Group for x = 5
)

# Create the scatter plot
p <- ggplot() +
  # Scatter plot
  geom_point(data = scatter_data, aes(x = x, y = y), color = "blue", size = 4) +
  # Overlay horizontal boxplots
  geom_boxplot(data = boxplot_data, aes(x = x, y = y, group = factor(x)), width = 0.3, color = "red", alpha = 0.5) +
  # Set axis labels and title
  labs(x = "X Axis (Categories)", y = "Y Axis (Values)", 
       title = "Scatter Plot with Overlayed Horizontal Boxplots") +
  theme_minimal()

# Display the plot
print(p)


```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Set random seed for reproducibility
set.seed(123)

# Generate random scatter plot data (x values as continuous, y values as categories)
scatter_data <- data.frame(
  x = c(20, 50, 30),  # Random x values for the scatter points
  y = c(1, 3, 5)  # Scatter points at y = 1, 3, 5
)

# Generate random data for horizontal boxplots (grouped by the same y values as scatter data)
boxplot_data <- data.frame(
  y = rep(c(1, 3, 5), each = 30),  # 30 random values for each y category
  x = c(rnorm(30, mean = 20, sd = 5),  # Group for y = 1
        rnorm(30, mean = 50, sd = 5),  # Group for y = 3
        rnorm(30, mean = 30, sd = 5))  # Group for y = 5
)

# Create the scatter plot
p <- ggplot() +
  # Scatter plot (make y a factor to treat it as categorical)
  geom_point(data = scatter_data, aes(x = x, y = factor(y)), color = "blue", size = 4) +
  # Overlay horizontal boxplots (x-axis as continuous, y-axis as factor)
  geom_boxplot(data = boxplot_data, aes(x = x, y = factor(y), group = factor(y)), width = 0.3, color = "red", alpha = 0.5) +
  # Set axis labels and title
  labs(x = "X Axis (Values)", y = "Y Axis (Categories)", 
       title = "Scatter Plot with Overlayed Horizontal Boxplots") +
  theme_minimal()

# Display the plot
print(p)


```

```{r}

# load data
df <- hwk_data

# filter data
hwk1_data <- df[df$hwk == 1,]
hwk_height_na <- hwk1_data %>% drop_na(Pre_Bird_Height)
hwk_apex_na <- hwk_height_na %>% drop_na(Flight_apex)
hwk_less10 <- subset(hwk_height_na, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Height" values within hwk1_data
unique_pre_heights <- unique(round(hwk_less10$Pre_Bird_Height))

# Initialize empty vectors to store the percentages and sample sizes
percentage_values <- numeric(length(unique_pre_heights))
sample_sizes <- numeric(length(unique_pre_heights))

# Calculate the percentage and sample size for each unique integer "Pre_Height" value within hwk1_data
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  total_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value)
  alarm_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value & hwk_height_na$Audio_React == "a")
  percentage_values[i] <- (alarm_count / total_count) * 100
  sample_sizes[i] <- alarm_count
}

# Generate random scatter plot data (x values as continuous, y values as categories)
scatter_data <- data.frame(
  x = 
  y = c(1, 3, 5)  # Scatter points at y = 1, 3, 5
)

# Generate random data for horizontal boxplots (grouped by the same y values as scatter data)
boxplot_data <- data.frame(
  y = rep(c(1, 3, 5), each = 30),  # 30 random values for each y category
  x = c(rnorm(30, mean = 20, sd = 5),  # Group for y = 1
        rnorm(30, mean = 50, sd = 5),  # Group for y = 3
        rnorm(30, mean = 30, sd = 5))  # Group for y = 5
)

# Create the scatter plot
p <- ggplot() +
  # Scatter plot (make y a factor to treat it as categorical)
  geom_point(data = scatter_data, aes(x = x, y = factor(y)), color = "blue", size = 4) +
  # Overlay horizontal boxplots (x-axis as continuous, y-axis as factor)
  geom_boxplot(data = boxplot_data, aes(x = x, y = factor(y), group = factor(y)), width = 0.3, color = "red", alpha = 0.5) +
  # Set axis labels and title
  labs(x = "X Axis (Values)", y = "Y Axis (Categories)", 
       title = "Scatter Plot with Overlayed Horizontal Boxplots") +
  theme_minimal()

# Display the plot
print(p)
```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Flight_apex) %>%
  rename(x = Flight_apex, y = rounded_height)

# Create the plot
p <- ggplot() +
  # Scatter plot for Alarm Percentage (points)
  geom_point(data = scatter_data, aes(x = y, y = factor(x)), color = "blue", size = 4) +
  # Overlay horizontal boxplots for Flight_apex
  geom_boxplot(data = boxplot_data, aes(x = x, y = factor(y), group = factor(y)), width = 0.3, color = "red", alpha = 0.5) +
  # Add labels and title
  labs(x = "Alarm Percentage / Flight Apex", y = "Bird Height (meters)", 
       title = "Alarm Percentage vs Bird Height with Flight Apex Boxplots") +
  theme_minimal()

# Display the plot
print(p)

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Flight_apex)

# Create the plot
p <- ggplot() +
  # Scatter plot for Alarm Percentage (points)
  geom_point(data = scatter_data, aes(x = x, y = y), color = "blue", size = 4) +
  # Overlay horizontal boxplots for Flight_apex
  geom_boxplot(data = boxplot_data, aes(x = Flight_apex, y = rounded_height, group = rounded_height), 
               width = 0.3, color = "red", alpha = 0.5, orientation = "y") +
  # Add labels and title
  labs(x = "Flight Apex / Bird Height (meters)", y = "Alarm Percentage (%)", 
       title = "Alarm Percentage vs Bird Height with Flight Apex Boxplots") +
  theme_minimal()

# Display the plot
print(p)

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Flight_apex)

# Create the alarm percentage plot (left y-axis)
p1 <- ggplot(scatter_data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 4) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE, color = "blue") +
  scale_y_continuous(name = "Alarm Percentage (%)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)") +
  theme_minimal()

# Create the Flight_apex boxplot (right y-axis)
p2 <- ggplot(boxplot_data, aes(x = rounded_height, y = Flight_apex)) +
  geom_boxplot(aes(group = rounded_height), color = "red", alpha = 0.5) +
  scale_y_continuous(name = "Flight Apex (meters)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)", position = "top") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

# Combine the two plots using gridExtra
grid.arrange(p1, p2, ncol = 1, heights = c(2/3, 1/3))

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Check the structure of alarm_summary to make sure the columns are there
print(str(alarm_summary))

# Scatter plot data
# Ensure that rounded_height and alarm_percentage exist in alarm_summary
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%   # Columns should exist here
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Flight_apex)

# Create the alarm percentage plot (left y-axis)
p1 <- ggplot(scatter_data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 4) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE, color = "blue") +
  scale_y_continuous(name = "Alarm Percentage (%)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)") +
  theme_minimal()

# Create the Flight_apex boxplot (right y-axis)
p2 <- ggplot(boxplot_data, aes(x = rounded_height, y = Flight_apex)) +
  geom_boxplot(aes(group = rounded_height), color = "red", alpha = 0.5) +
  scale_y_continuous(name = "Flight Apex (meters)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)", position = "top") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

# Combine the two plots using gridExtra
grid.arrange(p1, p2, ncol = 1, heights = c(2/3, 1/3))

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%   # Selecting the correct columns
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Flight_apex)

# Create the alarm percentage plot (left y-axis)
p1 <- ggplot(scatter_data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 4) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE, color = "blue") +
  scale_y_continuous(name = "Alarm Percentage (%)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)") +
  theme_minimal()

# Create the Flight_apex boxplot (right y-axis)
p2 <- ggplot(boxplot_data, aes(x = rounded_height, y = Flight_apex)) +
  geom_boxplot(aes(group = rounded_height), color = "red", alpha = 0.5) +
  scale_y_continuous(name = "Flight Apex (meters)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)", position = "top") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

# Combine the two plots using gridExtra
grid.arrange(p1, p2, ncol = 1, heights = c(2/3, 1/3))

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- hwk_data %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- hwk1_data %>%
  filter(Pre_Bird_Height <= 15)

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Check the structure of the alarm_summary to ensure it's correct
print(alarm_summary)

# Instead of select(), let's just rename columns directly
scatter_data <- alarm_summary %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height-Flight_apex))

# Create the alarm percentage plot (left y-axis)
p1 <- ggplot(scatter_data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 4) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 3), se = FALSE, color = "blue") +
  scale_y_continuous(name = "Alarm Percentage (%)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)") +
  theme_minimal()

# Create the Flight_apex boxplot (right y-axis)
p2 <- ggplot(boxplot_data, aes(x = rounded_height, y = Flight_apex)) +
  geom_boxplot(aes(group = rounded_height), color = "red", alpha = 0.5) +
  scale_y_continuous(name = "Flight Apex (meters)") +
  scale_x_continuous(name = "Pre-Bird Height (meters)", position = "top") +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

# Combine the two plots using gridExtra
grid.arrange(p1, p2, ncol = 1, heights = c(2/3, 1/3))

```

## Alarm Height and Hawk Difference

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming 'hwk_data' is your dataset

# Filter the data for rows where hwk is equal to 1 and remove NAs from Pre_Bird_Height and Flight_apex
hwk1_data <- hwk_data %>% filter(hwk == 1) %>% drop_na(Pre_Bird_Height, Flight_apex)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Calculate the percentage of alarms for each unique Pre_Bird_Height
alarm_percentage <- hwk1_data %>%
  group_by(Pre_Bird_Height = round(Pre_Bird_Height)) %>%
  summarise(Alarm_Percentage = sum(Audio_React == "a") / n() * 100)

# Create the scatter plot
p <- ggplot() +
  # Scatter plot of Alarm_Percentage vs. Pre_Bird_Height
  geom_point(data = alarm_percentage, aes(x = Pre_Bird_Height, y = Alarm_Percentage), color = "blue", size = 4) +
  
  # Overlay horizontal boxplots of Height_Difference
  geom_boxplot(data = hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference, group = round(Pre_Bird_Height)), 
               width = 0.3, color = "red", alpha = 0.5) +
  
  # Add text labels for min, mean, and max of Height_Difference using stat_summary
  stat_summary(data = hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference), 
               fun.min = min, fun.max = max, fun = mean, geom = "text", 
               fun.args = list(label = round(..y.., 1)), vjust = -1, hjust = 0.5, size = 3, color = "black") +
  
  # Set axis labels and title
  labs(x = "Pre_Bird_Height", y = "Alarm Percentage",
       title = "Alarm Percentage vs Pre_Bird_Height with Superimposed Boxplots") +
  theme_minimal()

# Display the plot
print(p)


```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)

# Data preprocessing for the first plot (Height Difference)
hwk1_data <- hwk_data %>% 
  filter(hwk == 1, alarm == 1) %>% 
  drop_na(Pre_Bird_Height, Flight_apex) %>%
  mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Boxplot of Height_Difference against rounded Pre_Bird_Height
p1 <- ggplot(hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference)) +
  geom_boxplot(aes(group = round(Pre_Bird_Height)), color = "red", alpha = 0.5, width = 0.3) +
  labs(x = "Pre_Bird_Height", y = "Height Difference (Flight_apex - Pre_Bird_Height)",
       title = "Height Difference Boxplots for Alarm Calls") +
  theme_minimal()

# Data preprocessing for the second plot (Alarm Percentage)
hwk1_data <- hwk_data %>%
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height)

# Subset for Pre_Bird_Height <= 15
hwk_less10 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate unique integer Pre_Height values
unique_pre_heights <- unique(round(hwk_less10$Pre_Bird_Height))

# Initialize empty vectors for percentages and sample sizes
percentage_values <- numeric(length(unique_pre_heights))
sample_sizes <- numeric(length(unique_pre_heights))

# Calculate percentage and sample size for each unique integer Pre_Height
for (i in 1:length(unique_pre_heights)) {
  pre_height_value <- unique_pre_heights[i]
  total_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value)
  alarm_count <- sum(round(hwk_less10$Pre_Bird_Height) == pre_height_value & hwk_less10$Audio_React == "a")
  percentage_values[i] <- (alarm_count / total_count) * 100
  sample_sizes[i] <- alarm_count
}

# Create data frame for the scatter plot
plot_data <- data.frame(Pre_Height = unique_pre_heights, Percentage = percentage_values, Sample_Size = sample_sizes)

# Create the scatter plot
p2 <- ggplot(plot_data, aes(x = Pre_Height, y = Percentage)) +
  geom_point() +
  labs(x = "Bird Height", y = "Percentage of Alarm Instances", title = "Alarm Percentage by Bird Height") +
  theme_minimal() +
  geom_text(aes(label = Sample_Size), hjust = -0.4, vjust = 0.5) + 
  scale_x_continuous(breaks = unique_pre_heights)

# Combine the two plots into one layout
grid.arrange(p1, p2, ncol = 1, heights = c(2/3, 1/3))

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Calculate the unique integer "Pre_Bird_Height" values
unique_pre_heights <- unique(round(hwk_less15$Pre_Bird_Height))

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  filter(alarm == 1) %>% 
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Height_Difference)

# Create the plot
p <- ggplot() +
  # Scatter plot for alarm percentage
  geom_point(data = scatter_data, aes(x = x, y = y), color = "blue", size = 4) +
  # Linear regression line with cubic polynomial and confidence interval
  geom_smooth(data = scatter_data, aes(x = x, y = y), method = "lm", formula = y ~ poly(x, 3), se = TRUE, color = "blue") +
  # Boxplots for Flight Apex centered on scatter points
  geom_boxplot(data = boxplot_data, aes(x = rounded_height, y = Height_Difference, group = factor(rounded_height)), 
               width = 0.3, color = "red", alpha = 0.5, position = position_dodge(width = 0.0)) +
  # Set axis labels and title
  labs(x = "Pre-Bird Height (meters)", y = "Alarm Percentage (%)") +
  theme_minimal() +
  scale_y_continuous(
    sec.axis = sec_axis(~., name = "Predator Height Difference (meters)"),  # Secondary y-axis for Flight Apex
  limits = c(-10, 10)) +
  theme(
    axis.title.y.left = element_text(color = "blue"),
    axis.title.y.right = element_text(color = "red")
  )

# Display the plot
print(p)

```

```{r}
# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_Apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  select(rounded_height, Height_Difference)

# Define the scaling factor for the right y-axis to stretch it across the same space as the left axis
scaling_factor <- 60 / 20  # Left axis range (60) / Right axis range (20)

# Create the plot
p <- ggplot() +
  # Scatter plot for alarm percentage
  geom_point(data = scatter_data, aes(x = x, y = y), color = "blue", size = 4) +
  # Linear regression line with cubic polynomial and confidence interval
  geom_smooth(data = scatter_data, aes(x = x, y = y), method = "lm", formula = y ~ poly(x, 3), se = TRUE, color = "blue") +
  # Boxplots for Height Difference centered on scatter points, scaled to match left y-axis
  geom_boxplot(data = boxplot_data, aes(x = rounded_height, y = Height_Difference * scaling_factor, group = factor(rounded_height)), 
               width = 0.3, color = "red", alpha = 0.5, position = position_dodge(width = 0.0)) +
  # Set axis labels and title
  labs(x = "Pre-Bird Height (meters)", y = "Alarm Percentage (%)") +
  theme_minimal() +
  scale_y_continuous(
    limits = c(0, 60),
    sec.axis = sec_axis(~ . / scaling_factor - 10, name = "Predator Height Difference (meters)", breaks = seq(-10, 10, 5), labels = seq(-10, 10, 5))
  ) +
  scale_x_continuous(
    breaks = unique_pre_heights,  # Ensures every height on the x-axis is labeled
    labels = unique_pre_heights
  ) +
  theme(
    axis.title.y.left = element_text(color = "blue"),
    axis.title.y.right = element_text(color = "red")
  )

# Display the plot
print(p)


```

```{r}
# Assuming your data is stored in the 'hwk_data' dataframe
df <- hwk_data  

# Filter the data for rows where hwk is equal to 1 and drop NA values in relevant columns
hwk1_data <- df %>% 
  filter(hwk == 1) %>%
  drop_na(Pre_Bird_Height, Flight_apex, Audio_React)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Subset for Pre_Bird_Height <= 15
hwk_less15 <- subset(hwk1_data, Pre_Bird_Height <= 15)

# Create a summary for alarm percentage
alarm_summary <- hwk_less15 %>%
  group_by(rounded_height = round(Pre_Bird_Height)) %>%
  summarise(
    total_count = n(),
    alarm_count = sum(Audio_React == "a"),
    alarm_percentage = (alarm_count / total_count) * 100
  )

# Scatter plot data
scatter_data <- alarm_summary %>%
  dplyr::select(rounded_height, alarm_percentage) %>%
  rename(x = rounded_height, y = alarm_percentage)

# Boxplot data for Flight_Apex (grouped by rounded Pre_Bird_Height)
boxplot_data <- hwk_less15 %>%
  mutate(rounded_height = round(Pre_Bird_Height)) %>%
  dplyr::select(rounded_height, Height_Difference)

# Define the scaling factor for the right y-axis to stretch it across the same space as the left axis
scaling_factor <- 60 / 20  # Left axis range (60) / Right axis range (20)

# Create the plot
p <- ggplot() +
  # Scatter plot for alarm percentage
  geom_point(data = scatter_data, aes(x = x, y = y), color = "blue", size = 4) +
  # Linear regression line with cubic polynomial and confidence interval
  geom_smooth(data = scatter_data, aes(x = x, y = y), method = "lm", formula = y ~ poly(x, 3), se = TRUE, color = "blue") +
  # Boxplots for Height Difference centered on scatter points, scaled to match left y-axis
  geom_boxplot(data = boxplot_data, aes(x = rounded_height, y = (Height_Difference + 10) * scaling_factor, group = factor(rounded_height)), 
               width = 0.3, color = "red", alpha = 0.5, position = position_dodge(width = 0.0)) +
  # Set axis labels and title
  labs(x = "Height (meters)", y = "Alarm Percentage (%)") +
  theme_minimal() +
  scale_y_continuous(
    limits = c(0, 60),
    sec.axis = sec_axis(~ . / scaling_factor - 10, name = "Predator Height Difference (meters)", breaks = seq(-10, 10, 5), labels = seq(-10, 10, 5))
  ) +
  scale_x_continuous(
    breaks = unique_pre_heights,  # Ensures every height on the x-axis is labeled
    labels = unique_pre_heights
  ) +
  theme(
    axis.title.y.left = element_text(color = "blue"),
    axis.title.y.right = element_text(color = "red")
  )

# Display the plot
print(p)

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming 'hwk_data' is your dataset

# Filter the data for rows where hwk is equal to 1 and remove NAs from Pre_Bird_Height and Flight_apex
hwk1_data <- hwk_data %>% filter(hwk == 1) %>% drop_na(Pre_Bird_Height, Flight_apex)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)
str(hwk1_data)

# Calculate unique Pre_Bird_Height values
unique_pre_heights <- unique(round(hwk1_data$Pre_Bird_Height))

# Calculate the percentage of alarms for each unique Pre_Bird_Height
alarm_percentage <- hwk1_data %>%
  group_by(Pre_Bird_Height = round(Pre_Bird_Height)) %>%
  summarise(Alarm_Percentage = sum(Audio_React == "a") / n() * 100)

# Create the scatter plot and overlay the boxplots
p <- ggplot() +
  # Scatter plot of Alarm_Percentage vs. Pre_Bird_Height
  geom_point(data = alarm_percentage, aes(x = Pre_Bird_Height, y = Alarm_Percentage), color = "blue", size = 4) +
  # Overlay horizontal boxplots of Height_Difference
  geom_boxplot(data = hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference, group = round(Pre_Bird_Height)), width = 0.3, color = "red", alpha = 0.5) +
  # Set axis labels and title
  labs(x = "Pre_Bird_Height", y = "Alarm Percentage (left) / Height Difference (right)",
       title = "Scatter Plot with Overlayed Horizontal Boxplots") +
  scale_y_continuous(sec.axis = sec_axis(~., name = "Height Difference")) +
  theme_minimal()

# Display the plot
print(p)


```

```{r}
# Filter the data for rows where hwk is equal to 1 and remove NAs from Pre_Bird_Height and Flight_apex
hwk1_data <- hwk_data %>% filter(hwk == 1, alarm == 1) %>% drop_na(Pre_Bird_Height, Flight_apex)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Create the boxplot of Height_Difference against rounded Pre_Bird_Height
p <- ggplot(hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference)) +
  geom_boxplot(aes(group = round(Pre_Bird_Height)), color = "red", alpha = 0.5, width = 0.3) +
  labs(x = "Pre_Bird_Height", y = "Height Difference (Pre_Bird_Height - Flight_apex)",
       title = "Height Difference Boxplots for Alarm Calls") +
  theme_minimal()

# Display the plot
print(p)

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Assuming 'hwk_data' is your dataset

# Filter the data for rows where hwk is equal to 1 and remove NAs from Pre_Bird_Height and Flight_apex
hwk1_data <- hwk_data %>% filter(hwk == 1) %>% drop_na(Pre_Bird_Height, Flight_apex)

# Calculate the height difference between Flight_apex and Pre_Bird_Height
hwk1_data <- hwk1_data %>% mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# Calculate the percentage of alarms for each unique Pre_Bird_Height
alarm_percentage <- hwk1_data %>%
  group_by(Pre_Bird_Height = round(Pre_Bird_Height)) %>%
  summarise(Alarm_Percentage = sum(Audio_React == "a") / n() * 100)

# Create the scatter plot
p <- ggplot() +
  # Scatter plot of Alarm_Percentage vs. Pre_Bird_Height
  geom_point(data = alarm_percentage, aes(x = Pre_Bird_Height, y = Alarm_Percentage), color = "blue", size = 4) +
  # Overlay horizontal boxplots of Height_Difference
  geom_boxplot(data = hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference, group = round(Pre_Bird_Height)), 
               width = 0.3, color = "red", alpha = 0.5) +
  # Add text labels for min, mean, and max of Height_Difference
  stat_summary(data = hwk1_data, aes(x = round(Pre_Bird_Height), y = Height_Difference), 
               fun.min = min, fun.max = max, fun = mean, geom = "text", 
               aes(label = round(..y.., 1)), vjust = -1, hjust = 0.5, size = 3, color = "black") +
  # Set axis labels and title
  labs(x = "Pre_Bird_Height", y = "Alarm Percentage",
       title = "Alarm Percentage vs Pre_Bird_Height with Superimposed Boxplots") +
  theme_minimal()

# Display the plot
print(p)


```

## Test Code

```{r}
#create data frame
df <- data.frame(x=1:15,
                 y=c(3, 14, 23, 25, 23, 15, 9, 5, 9, 13, 17, 24, 32, 36, 46))

#create a scatterplot of x vs. y
plot(df$x, df$y, pch=19, xlab='x', ylab='y')

#fit polynomial regression models up to degree 5
fit1 <- lm(y~x, data=df)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=df)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=df)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=df)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=df)

#create a scatterplot of x vs. y
plot(df$x, df$y, pch=19, xlab='x', ylab='y')

#define x-axis values
x_axis <- seq(1, 15, length=15)

#add curve of each model to plot
lines(x_axis, predict(fit1, data.frame(x=x_axis)), col='green')
lines(x_axis, predict(fit2, data.frame(x=x_axis)), col='red')
lines(x_axis, predict(fit3, data.frame(x=x_axis)), col='purple')
lines(x_axis, predict(fit4, data.frame(x=x_axis)), col='blue')
lines(x_axis, predict(fit5, data.frame(x=x_axis)), col='orange')

#calculated adjusted R-squared of each model
summary(fit1)$adj.r.squared
summary(fit2)$adj.r.squared
summary(fit3)$adj.r.squared
summary(fit4)$adj.r.squared
summary(fit5)$adj.r.squared

```

## Alarm Sex

```{r}

# Filter data to include only species with alarm call "a"
hwk1_data <- hwk_data[hwk_data$hwk == 1,]
hwk_alarm_data <- hwk1_data %>% filter(Audio_React == "a")
hwk_audio_na <- hwk_alarm_data %>% drop_na(Audio_React)
hwk_sex_na <- hwk_audio_na %>% drop_na(Sex)

# Convert Sex column to lowercase
hwk_sex_na$Sex <- tolower(hwk_sex_na$Sex)

# Group by species and sex, then calculate the percentage
df_species_sex <- hwk_sex_na %>%
  group_by(Scientific, Sex) %>%
  summarise(Count = n()) %>%
  mutate(Percentage = (Count / sum(Count)) * 100)

# Create the bar plot
ggplot(df_species_sex, aes(x = Scientific, y = Percentage, fill = Sex)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentage of Alarms by Sex for Each Species", x = "Species", y = "Percentage") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Abundance and Richness by Species

```{r}

library(dplyr)
library(ggplot2)

# Step 1: Filter data to include only timestamps where Audio_React is "a"
df <- hwk_data
hwk1_data <- df[df$hwk == 1,]

# Identify the timestamps where any species has an alarm call "a"
alarm_timestamps <- hwk1_data %>%
  filter(Audio_React == "a") %>%
  select(Timestamp) %>%
  distinct()

# Filter original data to keep only those timestamps
filtered_data <- hwk1_data %>%
  filter(Timestamp %in% alarm_timestamps$Timestamp)

# Step 2: Filter out species that never alarm
species_with_alarms <- filtered_data %>%
  group_by(Scientific) %>%
  filter(any(Audio_React == "a")) %>%
  ungroup()

# Step 3: Calculate richness, abundance, and alarm percentage for each species and timestamp
species_data <- species_with_alarms %>%
  group_by(Timestamp) %>% 
  mutate(
    Richness = n_distinct(Scientific), # Number of unique species in the flock
    Abundance = n(),  # Total number of individuals in the flock
    Alarm_Count = sum(Audio_React == "a"),
    Alarm_Percentage = (Alarm_Count / Abundance) * 100
  ) %>%
  ungroup()

# Step 4: Create a plot for each species that has alarms
species_list <- unique(species_data$Scientific)

for (sp in species_list) {
  species_subset <- species_data %>% filter(Scientific == sp)
  
  p <- ggplot(species_subset) +
    geom_point(aes(x = Abundance, y = Alarm_Percentage, color = "Abundance"), size = 3) +
    geom_smooth(aes(x = Abundance, y = Alarm_Percentage, color = "Abundance"), 
                method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
    geom_point(aes(x = Richness, y = Alarm_Percentage, color = "Richness"), size = 3) +
    geom_smooth(aes(x = Richness, y = Alarm_Percentage, color = "Richness"), 
                method = "lm", formula = y ~ poly(x, 2), se = FALSE) +
    labs(title = paste("Alarm Percentage vs Abundance and Richness for", sp), 
         x = "Abundance and Richness", 
         y = "Alarm Percentage (%)") +
    scale_color_manual(values = c("Abundance" = "red", "Richness" = "blue")) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, hjust = 1))
  
  print(p)  # This will display the plot for each species in the loop
}

```

## Alarm and Richness Flock Size

```{r}
library(dplyr)
library(ggplot2)

# Step 1: Filter data to include only timestamps where Audio_React is "a"
df <- hwk_data
hwk1_data <- df[df$hwk == 1,]

# Identify the timestamps where any species has an alarm call "a"
alarm_timestamps <- hwk1_data %>%
  filter(Audio_React == "a") %>%
  select(Timestamp) %>%
  distinct()

# Filter original data to keep only those timestamps
filtered_data <- hwk1_data %>%
  filter(Timestamp %in% alarm_timestamps$Timestamp)

# Step 2: Filter out species that never alarm
species_with_alarms <- filtered_data %>%
  group_by(Scientific) %>%
  filter(any(Audio_React == "a")) %>%
  ungroup()

# Step 3: Calculate richness, abundance, and alarm percentage for each species and timestamp
species_data <- species_with_alarms %>%
  group_by(Timestamp) %>% 
  mutate(
    Richness = n_distinct(Scientific), # Number of unique species in the flock
    Abundance = n(),  # Total number of individuals in the flock
    Alarm_Count = sum(Audio_React == "a"),
    Alarm_Percentage = (Alarm_Count / Abundance) * 100
  ) %>%
  ungroup()

# Remove duplicate rows for plotting
plot_data <- species_data %>%
  group_by(Scientific) %>%
  summarise(
    Avg_Richness = mean(Richness),
    Avg_Abundance = mean(Abundance),
    Avg_Alarm_Percentage = mean(Alarm_Percentage)
  ) %>%
  ungroup()

# Plot Alarm Percentage vs Richness and Abundance
p <- ggplot(plot_data) +
  geom_point(aes(x = Avg_Richness, y = Avg_Alarm_Percentage, color = "Richness"), size = 3) +
  geom_smooth(aes(x = Avg_Richness, y = Avg_Alarm_Percentage, color = "Richness"), 
              method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
  geom_point(aes(x = Avg_Abundance, y = Avg_Alarm_Percentage, color = "Abundance"), size = 3) +
  geom_smooth(aes(x = Avg_Abundance, y = Avg_Alarm_Percentage, color = "Abundance"), 
              method = "lm", formula = y ~ poly(x, 2), se = TRUE) +
  labs(title = "Alarm Percentage vs Richness and Abundance", 
       x = "Richness and Abundance", 
       y = "Average Alarm Percentage (%)") +
  scale_color_manual(values = c("Richness" = "blue", "Abundance" = "red")) +
  theme_minimal() +
  theme(legend.title = element_blank(), legend.position = "bottom")

# Print the plot
print(p)
```

```{r}
library(dplyr)
library(ggplot2)

# Step 1: Filter data to include only relevant columns
hwk1_data <- df[df$hwk == 1,]

# Step 2: Calculate abundance, richness, and alarm percentage for each timestamp
timestamp_data <- hwk1_data %>%
  group_by(Timestamp) %>%
  summarise(
    Abundance = n(),  # Total number of individuals in the flock
    Richness = n_distinct(Scientific),  # Number of unique species in the flock
    Alarm_Count = sum(Audio_React == "a"),
    Alarm_Percentage = ifelse(Abundance > 0, (Alarm_Count / Abundance) * 100, 0)
  ) %>%
  ungroup()

# Step 3: Remove instances with 0% alarm percentage
filtered_data <- timestamp_data %>%
  filter(Alarm_Percentage > 0)

# Step 4: Plot Abundance and Richness vs Alarm Percentage
p <- ggplot(filtered_data) +
  geom_point(aes(x = Richness, y = Alarm_Percentage, color = "Richness"), size = 3) +
  geom_smooth(aes(x = Richness, y = Alarm_Percentage, color = "Richness"), 
              method = "lm", formula = y ~ poly(x, 1), se = TRUE) +
  geom_point(aes(x = Abundance, y = Alarm_Percentage, color = "Abundance"), size = 3) +
  geom_smooth(aes(x = Abundance, y = Alarm_Percentage, color = "Abundance"), 
              method = "lm", formula = y ~ poly(x, 1), se = TRUE) +
  labs(title = "Alarm Percentage vs Abundance and Richness", 
       x = "Abundance and Richness", 
       y = "Alarm Percentage (%)") +
  scale_color_manual(values = c("Richness" = "blue", "Abundance" = "red")) +
  scale_x_continuous(limits = c(0, 24)) +  # Set x-axis limit to 24
  scale_y_continuous(limits = c(0, 100)) +
  theme_minimal() +
  theme(legend.title = element_blank(), legend.position = "bottom")

# Print the plot
print(p)

```

```{r}
library(dplyr)
library(ggplot2)

# Filter the data for rows where hwk is equal to 1 and Mid_Vocal is not NA
filtered_data <- df %>%
  filter(hwk == 1, !is.na(Mid_Vocal))

# Define the order of levels for Mid_Vocal
order_levels <- c("alarm", "call", "quiet", "song")

# Reorder the Mid_Vocal factor according to the defined order
filtered_data$Mid_Vocal <- factor(filtered_data$Mid_Vocal, levels = order_levels)

# Calculate the total count within each Tar_Sp2 category
total_counts <- filtered_data %>%
  group_by(Scientific) %>%
  summarize(total = n()) %>%
  ungroup()

# Calculate the percentage of each Mid_Vocal category within each Tar_Sp2 category
percentage_data <- filtered_data %>%
  group_by(Scientific, Mid_Vocal) %>%
  summarize(Count = n()) %>%
  ungroup() %>%
  left_join(total_counts, by = "Scientific") %>%
  mutate(Percentage = (Count / total) * 100)

# Filter to only include species with "alarm" occurrences
filtered_species <- percentage_data %>%
  filter(Mid_Vocal %in% order_levels)

# Create a stacked bar chart with the percentages
p <- ggplot(filtered_species, aes(x = Scientific, y = Percentage, fill = Mid_Vocal)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  labs(x = "Tar_Sp2", y = "Percentage (%)", title = "Percentage of Mid_Vocal Responses by Tar_Sp2") +
  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits to 0-100%
  scale_fill_manual(
    values = c("alarm" = "gray20", "call" = "gray40", "quiet" = "gray60", "song" = "gray"),
    guide = guide_legend(reverse = TRUE)  # Reverse the legend order
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10))

# Print the plot
print(p)

```

```{r}
library(dplyr)
library(ggplot2)

# Filter the data for rows where hwk is equal to 1 and Mid_Vocal is not NA
filtered_data <- df %>%
  filter(hwk == 1, !is.na(Mid_Vocal))

# Define the order of levels for Mid_Vocal with "alarm" at the bottom
order_levels <- c("alarm", "call", "quiet", "song")

# Reorder the Mid_Vocal factor according to the defined order
filtered_data$Mid_Vocal <- factor(filtered_data$Mid_Vocal, levels = order_levels)

# Calculate the total count of Mid_Vocal responses for each species
total_counts <- filtered_data %>%
  group_by(Scientific) %>%
  summarize(total = n(), .groups = 'drop')

# Calculate the count of each Mid_Vocal category within each species
percentage_data <- filtered_data %>%
  group_by(Scientific, Mid_Vocal) %>%
  summarize(Count = n(), .groups = 'drop') %>%
  left_join(total_counts, by = "Scientific") %>%
  mutate(Percentage = (Count / total) * 100)

# Create a stacked bar chart with the percentages, ensuring "alarm" is at the bottom
p <- ggplot(percentage_data, aes(x = Scientific, y = Percentage, fill = Mid_Vocal)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  labs(x = "Species", y = "Percentage (%)", title = "Percentage of Mid_Vocal Responses by Species") +
  scale_y_continuous(limits = c(0, 100)) +  # Set y-axis limits to 0-100%
  scale_fill_manual(
    values = c("alarm" = "gray20", "call" = "gray40", "quiet" = "gray60", "song" = "gray80"),
    guide = guide_legend(reverse = TRUE)  # Reverse the legend order
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))  # Rotate x-axis labels for readability

# Print the plot
print(p)

```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)

# Sample dataframe (replace this with your actual dataframe)
df <- hwk_data

filtered_data <- df %>%
  filter(!is.na(Mid_Vocal))

# Transform data from wide to long format
long_data <- filtered_data %>%
  pivot_longer(cols = starts_with("Rad_"), 
               names_to = "Height_Category", 
               values_to = "Density") %>%
  mutate(Height = as.numeric(gsub("Rad_", "", Height_Category))) %>%
  select(Scientific, Height, Density) %>%
  drop_na()  # Drop rows with NA values

# Normalize density to represent 100% for each meter
long_data <- long_data %>%
  group_by(Scientific, Height) %>%
  mutate(Density = Density / sum(Density)) %>%
  ungroup()

# List of unique species
species_list <- unique(long_data$Scientific)

# Loop through each species and create plots
for (species in species_list) {
  species_data <- long_data %>% filter(Scientific == species)
  
  p <- ggplot(species_data, aes(x = as.factor(Height), y = Density, group = Height)) +
    geom_violin(fill = "lightblue", color = "black", scale = "width") +
    labs(x = "Height (m)", y = "Normalized Density (%)", title = paste("Violin Plot for", species)) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10))  # Keep x-axis labels horizontal
  
  # Save or print the plot
  ggsave(filename = paste0("violin_plot_", species, ".png"), plot = p)
  # Or simply print
  # print(p)
}

```

## Network Map

```{r}
library(igraph)
library(dplyr)
library(tidyr)

# Select the dataframe
data <- hwk_data

# Convert "na" strings to actual NA values
data[data == "na"] <- NA

# Remove rows where Spp is NA
data <- data[!is.na(data$Spp), ]

# Group by Timestamp and create pairs of species
edges <- data %>%
  group_by(Timestamp) %>%
  summarise(pairs = if(n() > 1) list(combn(Spp, 2, simplify = FALSE)) else list(list(c(Spp[1], Spp[1])))) %>%
  unnest(pairs) %>%
  separate(pairs, into = c("from", "to"), sep = ",") %>%
  mutate(from = str_trim(from), to = str_trim(to))

# Ensure the nodes are labeled by species only
species <- unique(c(edges$from, edges$to))

# Create an igraph object using the edges
g <- graph_from_data_frame(edges, directed = FALSE)

# Define node colors based on the alarm column
alarm_levels <- unique(data$alarm)
n_colors <- length(alarm_levels)
palette <- sample(colors(), n_colors)  # Generate random colors for alarms

# Create node colors dataframe
node_colors <- data.frame(Spp = species,
                          color = palette[match(data$alarm[match(species, data$Spp)], alarm_levels)])

# Plot the network function with adjustable node spacing
plot_network <- function(g, node_colors, spacing = 2) {
  layout <- layout_with_fr(g, niter = 500, grid = "auto") * spacing  # Adjust the spacing with the multiplier

  plot(g, 
       layout = layout,
       vertex.color = node_colors$color[match(V(g)$species, node_colors$Spp)],
       vertex.label = V(g)$species,  # Label nodes with species names only
       vertex.label.color = "black",
       vertex.label.cex = 1.2,  # Increase label size
       vertex.label.font = 1,   # Bold font
       vertex.size = 1,
       edge.color = "gray",
       vertex.label.dist = 0.9) # Offset labels from points
  
  # Add legend for alarm levels
  legend("bottomright", legend = alarm_levels, fill = palette, title = "Alarm Levels")
}

# Plot the network with adjustable spacing
plot_network(g, node_colors, spacing = 5)  # Adjust spacing as needed

```

```{r}
library(igraph)
library(dplyr)
library(tidyr)

# Select the dataframe
data <- hwk_data

# Convert "na" strings to actual NA values
data[data == "na"] <- NA

# Remove rows where Spp is NA
data <- data[!is.na(data$Spp), ]

# Group by Timestamp and create pairs of species
edges <- data %>%
  group_by(Timestamp) %>%
  summarise(pairs = if(n() > 1) list(combn(Spp, 2, simplify = FALSE)) else list(list(c(Spp[1], Spp[1])))) %>%
  unnest(pairs) %>%
  mutate(from = sapply(pairs, `[`, 1),
         to = sapply(pairs, `[`, 2)) %>%
  select(from, to) %>%
  distinct()

# Ensure the nodes are labeled by species only
species <- unique(c(edges$from, edges$to))

# Create an igraph object using the edges
g <- graph_from_data_frame(edges, directed = FALSE, vertices = data.frame(name = species))

# Define node colors based on the alarm column
alarm_levels <- unique(data$alarm)
n_colors <- length(alarm_levels)
palette <- sample(colors(), n_colors)  # Generate random colors for alarms

# Create node colors dataframe
node_colors <- data.frame(Spp = species,
                          color = palette[match(data$alarm[match(species, data$Spp)], alarm_levels)])

# Plot the network function with adjustable node spacing
plot_network <- function(g, node_colors, spacing = 2) {  # Increase spacing for better visibility
  layout <- layout_with_fr(g, niter = 500) * spacing  # Adjust the spacing with the multiplier

  plot(g, 
       layout = layout,
       vertex.color = node_colors$color[match(V(g)$name, node_colors$Spp)],
       vertex.label = V(g)$name,  # Label nodes with species names only
       vertex.label.color = "black",
       vertex.label.cex = 1.2,  # Increase label size
       vertex.label.font = 2,   # Bold font
       vertex.size = 5,
       edge.color = "gray",
       vertex.label.dist = 1,   # Offset labels from points
       vertex.label.degree = -pi/4)  # Rotate labels slightly for better spacing
  
  # Add legend for alarm levels
  legend("bottomright", legend = alarm_levels, fill = palette, title = "Alarm Levels")
}

# Plot the network with adjustable spacing
plot_network(g, node_colors, spacing = 25)  # Adjust spacing as needed

```

\
\

```{r}
library(igraph)
library(dplyr)
library(tidyr)

# Select the dataframe
data <- hwk_data

# Convert "na" strings to actual NA values
data[data == "na"] <- NA

# Remove rows where Spp is NA
data <- data[!is.na(data$Spp), ]

# Group by Timestamp and create pairs of species
edges <- data %>%
  group_by(Timestamp) %>%
  summarise(pairs = if(n() > 1) list(combn(Spp, 2, simplify = FALSE)) else list(list(c(Spp[1], Spp[1])))) %>%
  unnest(pairs) %>%
  mutate(from = sapply(pairs, `[`, 1),
         to = sapply(pairs, `[`, 2)) %>%
  select(from, to) %>%
  distinct()

# Count the number of edges between each pair of nodes
edge_weights <- edges %>%
  count(from, to, name = "weight")

# Ensure the nodes are labeled by species only
species <- unique(c(edge_weights$from, edge_weights$to))

# Create an igraph object using the edges
g <- graph_from_data_frame(edge_weights, directed = FALSE, vertices = data.frame(name = species))

# Define node colors based on the alarm column
alarm_levels <- unique(data$alarm)
n_colors <- length(alarm_levels)
palette <- sample(colors(), n_colors)  # Generate random colors for alarms

# Create a mapping of species to their alarm levels
species_alarm <- data %>%
  select(Spp, alarm) %>%
  distinct() %>%
  filter(Spp %in% species)

# Create node colors dataframe
node_colors <- species_alarm %>%
  mutate(color = palette[match(alarm, alarm_levels)]) %>%
  select(Spp, color)

# Ensure all species are included in the node_colors dataframe
node_colors_full <- data.frame(Spp = species)
node_colors_full <- merge(node_colors_full, node_colors, by = "Spp", all.x = TRUE)

# Fill in missing colors with a default color (if any species didn't have an alarm level)
default_color <- "lightgray"
node_colors_full$color[is.na(node_colors_full$color)] <- default_color

# Plot the network function with adjustable node spacing and edge thickness
plot_network <- function(g, node_colors, edge_weights, spacing = 100) {  # Adjust spacing for better visibility
  layout <- layout_with_fr(g, niter = 1000) * spacing  # Adjust the spacing with the multiplier

  # Save the plot to a large PDF file
  pdf("large_network_plot.pdf", width = 20, height = 20)  # Adjust width and height for size

  plot(g, 
       layout = layout,
       vertex.color = node_colors$color[match(V(g)$name, node_colors$Spp)],
       vertex.label = V(g)$name,  # Label nodes with species names only
       vertex.label.color = "black",
       vertex.label.cex = 1,  # Adjust label size
       vertex.label.font = 2,   # Bold font
       vertex.size = 3,  # Adjust node size
       edge.color = "gray",
       edge.width = edge_weights$weight / max(edge_weights$weight) * 5,  # Adjust edge thickness
       vertex.label.dist = 0,   # Offset labels from points
       vertex.label.degree = -pi/4)  # Rotate labels slightly for better spacing
  
  # Add legend for alarm levels
  legend("bottomright", legend = alarm_levels, fill = palette, title = "Alarm Levels")
  
  dev.off()  # Close the PDF device
}

# Plot the network with adjustable spacing
plot_network(g, node_colors_full, edge_weights, spacing = 2)  # Adjust spacing as needed




```

## Density 10 Meter Intervals

```{r}
# Assuming df is your dataframe with columns for Pre_Height and Rad_01 to Rad_10
df <- hwk_data

# Drop rows with NA values in Pre_Bird_Height, Rad_01, Rad_02, ..., Rad_10
df <- df %>%
  drop_na(Pre_Bird_Height, starts_with("Rad_"))

# Ensure that Pre_Bird_Height and Rad_01 to Rad_10 are numeric
df <- df %>%
  mutate(across(c(Pre_Bird_Height, starts_with("Rad_")), as.numeric))

# Define a function to calculate the density metrics
calculate_density_metrics <- function(height, density_cols) {
  # Ensure height is within valid range
  height <- pmin(pmax(height, 1), 10)
  
  # If Pre_Height is 0, use the value for Rad_01
  if (height == 0) {
    density_at_height <- density_cols[1]
  } else {
    # Calculate Density at Pre_Bird_Height
    density_at_height <- density_cols[height]
  }
  
  # Initialize vectors to store the averages
  above_density <- numeric(10)
  below_density <- numeric(10)
  combined_density <- numeric(10)
  
  # Calculate the average density for above, below, and combined
  for (i in 1:10) {
    above_density[i] <- mean(density_cols[height:min(10, height + i)], na.rm = TRUE)
    below_density[i] <- mean(density_cols[max(1, height - i):height], na.rm = TRUE)
    combined_density[i] <- mean(density_cols[max(1, height - i):min(10, height + i)], na.rm = TRUE)
  }
  
  # Create a list to store the results
  list(
    density_at_height = density_at_height,
    above_density = above_density,
    below_density = below_density,
    combined_density = combined_density
  )
}

# Apply the function to each row and create new columns in the dataframe
rad_df <- df %>%
  rowwise() %>%
  mutate(
    Density_At_Pre_Height = calculate_density_metrics(Pre_Bird_Height, c_across(starts_with("Rad_")))$density_at_height,
    Density_Above_List = list(calculate_density_metrics(Pre_Bird_Height, c_across(starts_with("Rad_")))$above_density),
    Density_Below_List = list(calculate_density_metrics(Pre_Bird_Height, c_across(starts_with("Rad_")))$below_density),
    Density_Combined_List = list(calculate_density_metrics(Pre_Bird_Height, c_across(starts_with("Rad_")))$combined_density)
  ) %>%
  unnest_wider(Density_Above_List, names_sep = "_Above") %>%
  unnest_wider(Density_Below_List, names_sep = "_Below") %>%
  unnest_wider(Density_Combined_List, names_sep = "_Combined") %>%
  ungroup()

# View the updated dataframe
print(rad_df)
str(rad_df)
```

## Density Average Around Species

```{r}
# Assuming rad_df is your dataframe with the column Pre_Bird_Dense

# Convert Pre_Bird_Dense to a character if it isn't already
rad_df$Pre_Bird_Dense <- as.character(rad_df$Pre_Bird_Dense)

# Function to calculate Pre_Dense_Avg based on the format in Pre_Bird_Dense
calculate_pre_dense_avg <- function(dense_string) {
  # Split the string into individual characters, convert to numeric, and remove NAs
  dense_values <- na.omit(as.numeric(strsplit(dense_string, "")[[1]]))
  
  # Calculate the average of the numeric values
  dense_avg <- mean(dense_values, na.rm = TRUE)
  
  return(dense_avg)
}

# Apply the function to each row to calculate Pre_Dense_Avg and create a new dataframe dense_df
dense_df <- rad_df %>%
  mutate(Pre_Dense_Avg = sapply(Pre_Bird_Dense, calculate_pre_dense_avg))

# View the updated dense_df
print(dense_df)
head(dense_df)
```

# GLM

## Load GLM Data

```{r}

# Loading Reduced GLM Data
HwkGLM <- read_csv(here("data/HwkGLM.csv"))
str(HwkGLM)


  
```

## Assign Vector Type

```{r}

# Assigning Appropriat Data Types
df <- HwkGLM %>%
  mutate(across(c("Habitat_Primary",
                  "Habitat_Under_Dom1", 
                  "Habitat_Under_Dom2", 
                  "SocialGroup", 
                  "TarSpp",
                  "Alarm_Spp",
                  "Alarm_Sex",
                  "Tar_Sex",
                  "Audio_React",
                  "Pre_Vocal",
                  "Mid_Vocal",
                  "Pre_Behav"
                  ), as.factor)) %>% # Convert multiple columns to factors
  mutate(across(c("Obs1_bird_dist",
                  "Shoot_bird_dist",
                  "Alarm_Presence",
                  "Alarm_Qty",
                  "Alarm_Conspecific",
                  "abundance",
                  "richness",
                  "Proximity",
                  "Flight_dist",
                  "Flight_apex",
                  "Flight_proximity",
                  "Pre_Bird_Height",
                  "Bird_Dense_Avg",
                  "Post_Dist",
                  "Post_Bird_Height",
                  "Post_Dense_Avg",
                  "Veg_under_height",
                  "Veg_mid_low",
                  "Veg_mid_high",
                  "Veg_can_low",
                  "Veg_can_high",
                  "Rad_10_Avg",
                  "Veg_Under_Avg",
                  "Forage_Tree_height"
                  ), as.numeric)) # Convert multiple columns to numeric

str(df)
```

## 

## Remove NA

I'm not sure if this is needed actually

```{r}

# Function to replace values with NA in factor columns and drop unused levels
replace_with_na_in_factors <- function(df, replace_values) {
  # Iterate over each column
  df[] <- lapply(df, function(column) {
    if (is.factor(column)) {
      # Convert factor to character
      column <- as.character(column)
    }
    # Replace unwanted values with NA
    column[column %in% replace_values] <- NA
    # Optionally convert back to factor (dropping unused levels)
    return(factor(column))
  })
  return(df)
}

# Replace values in the specific columns you mentioned
replace_values <- c("NA", "na", "#N/A", "", "_")

# Apply the replacement function to the dataframe
df <- replace_with_na_in_factors(df, replace_values)

# View the structure of the updated dataframe
str(df)

glm_na <- na.omit(df)
str(glm_na)
```

## Add Data Relationships and Interactions

```{r}

# Create the new column by calculating the difference
glm_height <- df %>%
  mutate(Height_Difference = Flight_apex - Pre_Bird_Height)

# View the structure of the updated dataframe
str(glm_height)




# Function to clean a specific column
clean_column_in_df <- function(data, column_name, remove_values) {
  # Convert the column to character (to handle mixed types)
  data[[column_name]] <- as.character(data[[column_name]])
  
  # Remove rows with specific values or NA in the specified column
  cleaned_data <- data[!is.na(data[[column_name]]) & !data[[column_name]] %in% remove_values, ]
  
  # Convert the cleaned column back to numeric (if applicable)
  cleaned_data[[column_name]] <- suppressWarnings(as.factor(cleaned_data[[column_name]]))
  
  return(cleaned_data)
}

# Define the values you want to remove (e.g., "a", "b", "c")
remove_values <- c("lek")

# Clean the 'values' column, retaining all other columns
cleaned_df <- clean_column_in_df(glm_height, "SocialGroup", remove_values)

# View the cleaned data frame
str(cleaned_df)
```

### GLM Predator

```{r}

cleaned_df[ !is.na(cleaned_df$Pre_Bird_Height),]

subset(cleaned_df, !is.na(Pre_Bird_Height))

str(cleaned_df)

glm_predator <- glm(Alarm_Presence ~ 
                      SocialGroup + 
                      Pre_Bird_Height +
                      Flight_dist + 
                      Height_Difference + 
                      Flight_proximity + 
                      Height_Difference * Flight_proximity + 
                      Pre_Bird_Height * Height_Difference * Flight_proximity
                      , data = cleaned_df, family = binomial(link = "logit"))
summary(glm_predator)
```

```{r}
predator_summary <- tidy(glm_predator)

# Save the summary as a CSV file
write.csv(predator_summary, "predator_summary.csv", row.names = FALSE)
```

### GLM Social Group

```{r}

glm_social1 <- glm(Alarm_Presence ~ SocialGroup, data = cleaned_df, family = binomial(link = "logit"))
summary(glm_social1)
anova(glm_social1)
TukeyHSD(glm_social1, conf.level=.95) 

library(emmeans)
em <- emmeans(glm_social1), "SocialGroup")
contrast(em, "pairwise", adjust = "Tukey")

# look into Tukey test - all pairwise comparisons
# contrast approach
# pair-wise comparison
# find aov package
# add model output ANOVA
```

### GLM Social Factors

```{r}

glm_social2 <- glm(Alarm_Presence ~ SocialGroup + abundance + richness, data = cleaned_df, family = binomial(link = "logit"))
summary(glm_social2)
```

### GLM Veg

```{r}

glm_veg_all <- glm(Alarm_Presence ~ Bird_Dense_Avg + Veg_Under_Avg + Veg_under_height + Veg_mid_low + Veg_mid_high + Rad_10_Avg, data = df_filtered, family = binomial(link = "logit"))
summary(glm_veg_all)

glm_dense <- glm(Alarm_Presence ~ Pre_Bird_Height + Bird_Dense_Avg + Veg_mid_low + Rad_10_Avg, data = df_filtered, family = binomial(link = "logit"))
summary(glm_dense)
```

## Remove Unwanted Variables For Permutations

```{r}

# Columns to remove
unwanted_columns <- c("Index",
                      "Timestamp",
                      "lat",
                      "long",
                      "Obs1_bird_dist",
                      "Shoot_bird_dist",
                      "TarSpp",
                      "Alarm_Spp",
                      "Tar_Sex",
                      "Forage_Tree_height",
                      "Target",
                      "Scientific",
                      "BirdTree",
                      "Habitat_Primary",
                      "Habitat_Under_Dom1",
                      "Habitat_Under_Dom2",
                      "Angle",
                      "Proximity",
                      "Audio_React",
                      "Veg_dense_under",
                      "Pre_Bird_Dense",
                      "Pre_Vocal",
                      "Pre_Behav",
                      "Mid_Vocal",
                      "Mid_Behav",
                      "Post_Vocal",
                      "Post_Behav",
                      "Freeze_Time_sec",
                      "Post_Dist",
                      "Post_Bird_Dense",
                      "Veg_can_low",
                      "Veg_can_high",
                      "Rad_01",
                      "Rad_02",
                      "Rad_03",
                      "Rad_04",
                      "Rad_05",
                      "Rad_06",
                      "Rad_07",
                      "Rad_08",
                      "Rad_09",
                      "Rad_10",
                      "flock",
                      "alarm"
                      )

# Remove unwanted columns using [ ] notation
df_filtered <- cleaned_df[, !names(cleaned_df) %in% unwanted_columns]

# Replace "#N/A" with NA in the Social_Index column
df_filtered$SocialGroup[df_subset$SocialGroup == "#N/A"] <- NA
str(df_filtered)
view(df_filtered)
```

## LASSO

```{r}
# Load necessary library
library(glmnet)

# Remove rows with NA values from the dataset
df_filtered <- na.omit(df_filtered)

# Prepare the data
X <- model.matrix(Alarm_Presence ~ . - 1, data = df_filtered)
y <- df_filtered$Alarm_Presence

# Run LASSO (alpha = 1 for LASSO)
lasso_model <- cv.glmnet(X, y, family = "binomial", alpha = 1)

# Get the best lambda (penalty term)
best_lambda <- lasso_model$lambda.min

# Coefficients of the best model
lasso_coefs <- coef(lasso_model, s = best_lambda)

# Print the coefficients
print(lasso_coefs)

```

```{r}

library(glmnet)

# Remove rows with NA values from the dataset
df_filtered <- na.omit(df_filtered)
str(df_filtered)

# Prepare the data
X <- model.matrix(Alarm_Presence ~ . - 1, data = df_filtered)
y <- df_filtered$Alarm_Presence

# Run LASSO (alpha = 1 for LASSO)
lasso_model <- cv.glmnet(X, y, family = "binomial", alpha = 1)

# Get the best lambda (penalty term)
best_lambda <- lasso_model$lambda.min

# Coefficients of the best model
coef(lasso_model, s = best_lambda)

```

## GLM Based on LASSO

```{r}

glm_lasso <- glm(Alarm_Presence ~ SocialGroup + Alarm_Qty + Pre_Vocal + Pre_Behav, data = df_filtered, family = binomial(link = "logit"))
summary(glm_lasso)
```

## Stepwise GLM

```{r}
library(car)

# Check for aliased coefficients
alias(full_model)

# Calculate VIF for the full model
vif_values <- vif(full_model)
print(vif_values)

# Identify variables with high VIF (generally above 5 or 10)
high_vif_vars <- names(vif_values[vif_values > 5])
print(high_vif_vars)

# Consider removing or combining variables with high VIF

```

```{r}

# Check for factors with less than two levels
low_level_factors <- sapply(df_filtered, function(x) is.factor(x) && nlevels(x) < 2)

# Print the variables with less than two levels
print(names(low_level_factors[low_level_factors]))

# Remove low-level factors from the dataset
df_filtered <- df_filtered[, !low_level_factors]

# Convert character columns to factors
df_filtered <- df_filtered %>%
  mutate(across(where(is.character), as.factor))

# Remove columns that are completely NA
df_filtered <- df_filtered[, colSums(is.na(df_filtered)) != nrow(df_filtered)]

df_filtered <- na.omit(df_filtered)

# Print the structure to verify changes
str(df_filtered)

# Run a full GLM model with all variables
full_model <- glm(Alarm_Presence ~ ., data = df_filtered, family = binomial(link = "logit"))

# Stepwise model selection based on AIC
stepwise_model <- stepAIC(full_model, direction = "both")

# Check the final selected model
summary(stepwise_model)

```

```{r}

glm_step_best <- glm(Alarm_Presence ~ Alarm_Qty + Alarm_Conspecific, data = df_filtered, family = binomial(link = "logit"))
vif(glm_step_best)

summary(df_filtered$Alarm_Qty)
table(df_filtered$Alarm_Qty)

```

```{r}

library(pscl)
zero_inflated_model <- zeroinfl(Alarm_Presence ~ SocialGroup | Alarm_Qty, data = df_filtered, dist = "poisson")
summary(zero_inflated_model)

```

```{r}
# Check for variables with only one unique value
single_level_vars <- sapply(df_filtered, function(x) length(unique(na.omit(x))) == 1)

# Print the variables with only one level
print(names(single_level_vars[single_level_vars]))

# Remove variables with only one level from the dataset
df_filtered <- df_filtered[, !single_level_vars]

# Convert character columns to factors
df_filtered <- df_filtered %>%
  mutate(across(where(is.character), as.factor))

# Remove columns that are completely NA
df_filtered <- df_filtered[, colSums(is.na(df_filtered)) != nrow(df_filtered)]

library(MASS)

# Run a full GLM model with all variables
full_model <- glm(Alarm_Presence ~ ., data = df_subset, family = binomial(link = "logit"))

# Stepwise model selection based on AIC
stepwise_model <- stepAIC(full_model, direction = "both")

# Check the final selected model
summary(stepwise_model)
```

```{r}
# Convert character columns to factors
df_filtered <- df_filtered %>%
  mutate(across(where(is.character), as.factor))

# Remove columns that are completely NA
df_filtered <- df_filtered[, colSums(is.na(df_filtered)) != nrow(df_filtered)]


```

```{r}
library(MASS)

# Run a full GLM model with all variables
full_model <- glm(Alarm_Presence ~ ., data = df_subset, family = binomial(link = "logit"))

# Stepwise model selection based on AIC
stepwise_model <- stepAIC(full_model, direction = "both")

# Check the final selected model
summary(stepwise_model)

```

## Permutations Script

MUCH MUCH MUCH TOO BIG. Apparently 4.3 Billion combinations...

```{r}


# List of independent variables (ensure there are no leading or trailing spaces)
independent_vars <- c("Obs1_bird_dist",
                      "Shoot_bird_dist",
                      "SocialGroup",
                      "TarSpp",
                      "Alarm_Presence",
                      "Alarm_Qty",
                      "Alarm_Spp",
                      "Alarm_Sex",
                      "Alarm_Conspecific",
                      "abundance",
                      "richness",
                      "Tar_Sex",
                      "Flight_dist",
                      "Flight_apex",
                      "Flight_proximity",
                      "Pre_Bird_Height",
                      "Forage_Tree_height",
                      "Veg_Under_Avg",
                      "Veg_under_height",
                      "Bird_Dense_Avg",
                      "Pre_Vocal",
                      "Pre_Behav",
                      "Mid_Vocal",
                      "Post_Dist",
                      "Post_Bird_Height",
                      "Post_Dense_Avg",
                      "Veg_mid_low",
                      "Veg_mid_high",
                      "Veg_can_low",
                      "Veg_can_high",
                      "Rad_10_avg",
                      "Height_Difference"
                      )

# List to store model outputs
model_outputs <- list()

# Generate all combinations of independent variables
all_combinations <- lapply(seq_along(independent_vars), function(n) combn(independent_vars, n, simplify = FALSE))

# Flatten the list of combinations
all_combinations <- unlist(all_combinations, recursive = FALSE)

# Run GLM models for each combination
for (vars in all_combinations) {
  formula_string <- paste("Alarm_Presence ~", paste(vars, collapse = " + "))
  model <- glm(as.formula(formula_string), data = df_filtered, family = binomial(link = "logit"))
  # Extract AIC and other model output
  model_output <- broom::tidy(model)
  model_output$AIC <- AIC(model)
  # Store model output in list
  model_outputs[[paste(vars, collapse = "_")]] <- model_output
}

# Combine model outputs into one large table
combined_table <- bind_rows(model_outputs, .id = "Combination")

# Print the combined table
# print(combined_table)


# Define the file path using here()
file_path <- here("output", "all_model_AIC_table.csv")

# Write the combined table to the CSV file
write.csv(combined_table, file_path, row.names = FALSE)
```

# Post-Hoc Tukey

## Social Group

```{r}

glm_height %>% drop_na(Alarm_Presence)
str(glm_height)
model <- aov(Alarm_Presence ~ SocialGroup, data = glm_height)
summary(model)

# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model, conf.level = 0.95)

# Convert the TukeyHSD results to a data frame
tukey_df <- as.data.frame(tukey_results[[1]])

# Save the Tukey HSD results to a CSV file
write.csv(tukey_df, "tukey_hsd_results.csv", row.names = TRUE)
```

```{r}
plot(TukeyHSD(model, conf.level=.95), las = 2)
```

```{r}

model_summary <- tidy(model)

# Save the summary as a CSV file
write.csv(model_summary, "model_summary.csv", row.names = FALSE)
```

## Species

```{r}

glm_height[glm_height == c("na", "#N/A", "none")] <- NA
glm_height %>% drop_na(Alarm_Presence)
glm_height %>% drop_na(Alarm_Spp)
str(glm_height)

aov_filter <- glm_height %>% 
  filter(Alarm_Presence == 1, na.rm = TRUE)

model <- aov(Alarm_Presence ~ Alarm_Spp, data = glm_height)
summary(model)

#perform Tukey's Test
TukeyHSD(model, conf.level=.95) 
```
